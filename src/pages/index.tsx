import Head from "next/head"
import Image from "next/image"
import { Inter } from "next/font/google"
import styles from "@/styles/Home.module.css"
import GameLayout from "@/components/Layout/GameLayout"
import SelectLayout from "@/components/Layout/SelectLayout"
import TalkScreen from "@/components/uiGroups/TalkScreen"
import Confession from "@/components/uiGroups/Confession"
import { useState, useContext, useEffect } from "react"
import { AnswerContext } from "@/components/providers/AnswerContext"
import { useChat } from "@/lib/api"

const inter = Inter({ subsets: ["latin"] })

export default function Home() {
  //answerの型定義
  interface Answer {
    genre: string
    answer: string
  }
  //AIのメッセージを格納するstate
  const [messages, setMessages] = useState("")
  //対話画面なのか、幕間画面なのかを判断するstate
  const [isInterMission, setIsInterMission] = useState<boolean>(true)
  //入力情報を受け取るstate
  const [selectedAnswers, setSelectedAnswers] = useState<Answer[]>([])
  //選択に応じて場面を変える関数
  const selectSituation = () => {
    if (selectedAnswers[10]) {
      if (selectedAnswers[10].answer === "学校") {
        const selectSituation = "/教室12.jpeg"
        return selectSituation
      } else if (selectedAnswers[10].answer === "自宅") {
        const selectSituation = "/ジェシーの部屋2.jpeg"
        return selectSituation
      } else if (selectedAnswers[10].answer === "遊園地") {
        const selectSituation = "/遊園地.jpeg"
        return selectSituation
      } else {
        const selectSituation = "/放課後の教室.jpeg"
        return selectSituation
      }
    } else {
      return "/放課後の教室.jpeg"
    }
  }
  //選んだ状況に応じて背景を変える処理
  const situation = selectSituation()
  //ゲームが終了したのかを判断するstate
  const [isEnd, setIsEnd] = useState<boolean>(false)
  //告白の場面なのか、ゲーム画面なのかを判断するstate
  const [isNotConfessionTime, setIsNotConfessionTime] = useState<boolean>(true)
  //相手の名前に関するstate
  const [name, setName] = useState("ジェシー")
  //幕間画面からゲーム画面に戻すための関数
  const clickChangeScreen = () => {
    setIsInterMission(!isInterMission)
  }
  //ゲームの終了を知らせる関数
  const clickSetEnd = () => {
    setIsEnd(true)
  }
  const [imageUrl, setImageUrl] = useState<string>("")
  //告白タイムなのかを判断するための関数
  const clickSetConfession = () => {
    setIsNotConfessionTime(!isNotConfessionTime)
    setMessages("")
  }

  const { isCompleted, setIsCompleted } = useContext(AnswerContext)
  console.log(isCompleted)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {!isCompleted ? (
        <SelectLayout setSelectedAnswers={setSelectedAnswers} selectedAnswers={selectedAnswers} imageUrl={imageUrl} setImageUrl = {setImageUrl}>
          <div></div>
        </SelectLayout>
      ) : isNotConfessionTime ? (
        <GameLayout situation={situation}>
          <TalkScreen
            text={messages}
            setText={setMessages}
            clickSetConfession={clickSetConfession}
            name={name}
            placeholder="ここに話したいことを記入してください"
            talkButton="話す"
            imageUrl={imageUrl}
            setImageUrl={setImageUrl}
            selectedAnswers={selectedAnswers}
            setSelectedAnswers={setSelectedAnswers}
          />
        </GameLayout>
      ) : isEnd ? (
        //告白が終わっているかを判断
        <Confession text="END" />
      ) : isInterMission ? (
        //対話画面なのか、幕間画面なのかを判断
        <Confession clickChangeScreen={clickChangeScreen} text="♡告白タイム♡" />
      ) : (
        <GameLayout situation="/放課後の教室.jpeg">
          <TalkScreen
            clickSetEnd={clickSetEnd}
            text={messages}
            setText={setMessages}
            name={name}
            placeholder="さぁ、告白してください!"
            talkButton="告白する"
            imageUrl={imageUrl}
            setImageUrl={setImageUrl}
            selectedAnswers={selectedAnswers}
            setSelectedAnswers={setSelectedAnswers}
          />
        </GameLayout>
      )}
    </>
  )
}
